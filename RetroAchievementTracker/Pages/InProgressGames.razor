@page "/inprogressgames"

@using RetroAchievementTracker.Data.GameDataModal
@using RetroAchievementTracker.Data.Login
@using RetroAchievementTracker.Data.TableData
@using RetroAchievementTracker.Data.Enums
@using RetroAchievementTracker.Shared.Dialogs

@inject GameDataModalService GameDataModalService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject LoginService LoginService;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject TableDataService TableDataService;

<MudText Typo="Typo.h3" Align="Align.Center" Class="pt-5 pb-8" Style="color: white;">@System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(LoggedInUser)'s In Progress Games</MudText>

@if(!LoggedIn)
{
    <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Warning">You need to be logged in to access in progress games!</MudText>
}

@if(TableData != null)
{
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="TableData" Hover=true Striped=true Class="mt-3 mb-4" Elevation=5 OnRowClick="OpenGameModal" T="TableData" Filter="new Func<TableData,bool>(FilterGames)">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="@GameNameSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Game Icon</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.AchievementCount)" >Achievement Count</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.AchievementsGained)">Achievements Gained</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.GamePercentage)" InitialDirection=SortDirection.Descending>Percentage Completed</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.Genre)">Genre</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.ImageIconUrl" Class="rounded-lg"></MudImage></MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
            <MudTd DataLabel="Achievements Gained">@context.AchievementsGained</MudTd>
            <MudTd DataLabel="Percentage Completed">@context.GamePercentage.ToString("P")</MudTd>
            <MudTd DataLabel="Genre">@context.Genre</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>
}

@code {
    private bool LoggedIn = false;
    private string LoggedInUser = "";
    private List<TableData> TableData;
    private string GameNameSearch = "";

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            //Make sure it's a valid login and get the logged in user
            if(LoginService.ValidateUserLogin(await LocalStorage.GetItemAsync<string>("loginToken")))
            {
                LoggedIn = true;
                LoggedInUser = LoginService.GetLoggedInUser(await LocalStorage.GetItemAsync<string>("loginToken"));
            }

            TableData = TableDataService.GetInProgressGameTableData(LoggedInUser);
            StateHasChanged();
        }
    }

    private bool FilterGames(TableData data) => FilterFunc(data, GameNameSearch);

    private bool FilterFunc(TableData data, string searchString)
    {
        if(string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if(data.Genre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if(data.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private async Task OpenGameModal(TableRowClickEventArgs<TableData> row)
    {
        var game = await GameDataModalService.GetLoggedInDataToPopulateModal(row.Item.Id, LoggedInUser);

        if (game == null)
        {
            Snackbar.Add("Failed to get game info", Severity.Error);
            return;
        }

        var parameters = new DialogParameters { ["GameDataModal"] = game, ["LoggedIn"] = LoggedIn, ["LoggedInUser"] = LoggedInUser };
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium
        };

        var dialog = DialogService.Show<GameDialog>("Game Info", parameters, options);
    }
}
