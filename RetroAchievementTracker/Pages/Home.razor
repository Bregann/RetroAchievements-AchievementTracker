@page "/home"
@using Data.GameData
@using DateTimeToStringWithSuffix
@using RetroAchievementTracker.Data.GameDataModal
@using RetroAchievementTracker.Data.Login
@using RetroAchievementTracker.Shared.Dialogs
@using RetroAchievementsAPI

@inject GameDataService GameDataService;
@inject GameDataModalService GameDataModalService;
@inject LoginService LoginService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if(LoggedIn)
{
    <MudText Typo="Typo.h2" Align="Align.Center" Class="pt-5 pb-8" Style="color: white;">Welcome Back, @System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(LoggedInUser)!</MudText>

}
else
{
    <MudText Typo="Typo.h3" Align="Align.Center" Class="pt-5 pb-8" Style="color: white;">Home</MudText>
}

<MudContainer MaxWidth="MaxWidth.Large" Style="overflow: hidden">
    <MudText Typo="Typo.h5" Align="Align.Center">Games Added/Updated - @DateTime.Today.Date.ToStringWithSuffix("dd MMMM")</MudText>
    @if(gamesToday.Count == 0)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No games added :(</MudText>
    }
    else
    {
        <MudTable Items="gamesToday" Hover=true Striped=true Class="mt-3" Elevation=5 OnRowClick="OpenGameModal" T="GameData">
            <HeaderContent>
                <MudTh>Game Icon</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Achievement Count</MudTh>
                <MudTh>Genre</MudTh>
                <MudTh>Console</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.GameIcon" Class="rounded-lg"></MudImage></MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
                <MudTd DataLabel="Genre">@context.Genre</MudTd>
                <MudTd DataLabel="Console">@context.Console</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">Games Added/Updated - @DateTime.Now.AddDays(-1).ToStringWithSuffix("dd MMMM")</MudText>
    @if(gamesYesterday.Count == 0)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No games added :(</MudText>
    }
    else
    {
        <MudTable Items="gamesYesterday" Hover=true Striped=true Class="mt-3" Elevation=5 OnRowClick="OpenGameModal" T="GameData">
            <HeaderContent>
                <MudTh>Game Icon</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Achievement Count</MudTh>
                <MudTh>Genre</MudTh>
                <MudTh>Console</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.GameIcon" Class="rounded-lg"></MudImage></MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
                <MudTd DataLabel="Genre">@context.Genre</MudTd>
                <MudTd DataLabel="Console">@context.Console</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">Games Added/Updated - @DateTime.Now.AddDays(-2).ToStringWithSuffix("dd MMMM")</MudText>
    @if(games2Days.Count == 0)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No games added :(</MudText>
    }
    else
    {
        <MudTable Items="games2Days" Hover=true Striped=true Class="mt-3" Elevation=5 OnRowClick="OpenGameModal" T="GameData">
            <HeaderContent>
                <MudTh>Game Icon</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Achievement Count</MudTh>
                <MudTh>Genre</MudTh>
                <MudTh>Console</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.GameIcon" Class="rounded-lg"></MudImage></MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
                <MudTd DataLabel="Genre">@context.Genre</MudTd>
                <MudTd DataLabel="Console">@context.Console</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">Games Added/Updated - @DateTime.Now.AddDays(-3).ToStringWithSuffix("dd MMMM")</MudText>
    @if(games3Days.Count == 0)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No games added :(</MudText>
    }
    else
    {
        <MudTable Items="games3Days" Hover=true Striped=true Class="mt-3" Elevation=5 OnRowClick="OpenGameModal" T="GameData">
            <HeaderContent>
                <MudTh>Game Icon</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Achievement Count</MudTh>
                <MudTh>Genre</MudTh>
                <MudTh>Console</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.GameIcon" Class="rounded-lg"></MudImage></MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
                <MudTd DataLabel="Genre">@context.Genre</MudTd>
                <MudTd DataLabel="Console">@context.Console</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">Games Added/Updated - @DateTime.Now.AddDays(-4).ToStringWithSuffix("dd MMMM")</MudText>
    @if(games4Days.Count == 0)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No games added :(</MudText>
    }
    else
    {
        <MudTable Items="games4Days" Hover=true Striped=true Class="mt-3 mb-4" Elevation=5 OnRowClick="OpenGameModal" T="GameData">
            <HeaderContent>
                <MudTh>Game Icon</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Achievement Count</MudTh>
                <MudTh>Genre</MudTh>
                <MudTh>Console</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.GameIcon" Class="rounded-lg"></MudImage></MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
                <MudTd DataLabel="Genre">@context.Genre</MudTd>
                <MudTd DataLabel="Console">@context.Console</MudTd>
            </RowTemplate>
        </MudTable>
    }

</MudContainer>

@code {
    //probably a better way of doing this tbf
    private List<GameData> gamesToday = new();
    private List<GameData> gamesYesterday = new();
    private List<GameData> games2Days = new();
    private List<GameData> games3Days = new();
    private List<GameData> games4Days = new();
    private bool LoggedIn = false;
    private bool Last3DaysRendered = false;
    private string LoggedInUser;

    protected override Task OnInitializedAsync()
    {
        gamesToday = GameDataService.GetGamesAddedOnSpecificDate(DateTime.Today);
        gamesYesterday = GameDataService.GetGamesAddedOnSpecificDate(DateTime.Now.AddDays(-1));
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            //Make sure it's a valid login and get the logged in user
            if(LoginService.ValidateUserLogin(await LocalStorage.GetItemAsync<string>("loginToken")))
            {
                LoggedIn = true;
                LoggedInUser = LoginService.GetLoggedInUser(await LocalStorage.GetItemAsync<string>("loginToken"));
                StateHasChanged();
            }
        }

        if(!Last3DaysRendered)
        {
            games2Days = GameDataService.GetGamesAddedOnSpecificDate(DateTime.Now.AddDays(-2));
            games3Days = GameDataService.GetGamesAddedOnSpecificDate(DateTime.Now.AddDays(-3));
            games4Days = GameDataService.GetGamesAddedOnSpecificDate(DateTime.Now.AddDays(-4));
            Last3DaysRendered = true;
            StateHasChanged();
        }
    }

    private async Task OpenGameModal(TableRowClickEventArgs<GameData> row)
    {
        GameDataModal game;

        //check login status before opening
        if(LoginService.ValidateUserLogin(await LocalStorage.GetItemAsync<string>("loginToken")))
        {
            LoggedIn = true;
            LoggedInUser = LoginService.GetLoggedInUser(await LocalStorage.GetItemAsync<string>("loginToken"));
        }
        else
        {
            LoggedIn = false;
            LoggedInUser = "";
        }

        if(LoggedIn)
        {
            game = await GameDataModalService.GetLoggedInDataToPopulateModal(row.Item.GameId, LoggedInUser);
        }
        else
        {
            game = await GameDataModalService.GetGameDataToPopulateModal(row.Item.GameId);
        }

        if (game == null)
        {
            Snackbar.Add("Failed to get game info", Severity.Error);
            return;
        }

        var parameters = new DialogParameters { ["GameDataModal"] = game, ["LoggedIn"] = LoggedIn };
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium
        };

        var dialog = DialogService.Show<GameDialog>("Game Info", parameters, options);
    }
}
