@using System.ComponentModel.DataAnnotations
@using Data.Login;

@inject LoginService LoginService;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar;

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h5" Style="font-weight: bold">
                <MudIcon Icon="@Icons.Filled.Login" Size="Size.Medium" Class="mr-1 mb-n1"></MudIcon>
                Registration</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>You can find your RetroAchievements API key at <MudLink Href="https://retroachievements.org/controlpanel.php" Target="_blank">https://retroachievements.org/controlpanel.php</MudLink></MudText>
            <MudTextField @bind-Value="model.RAUsername" For="@(() => model.RAUsername)" Label="RA Username" Required=true></MudTextField>
            <MudTextField @bind-Value="model.RAAPIKey" For="@(() => model.RAAPIKey)" Label="RA API Key" Required=true></MudTextField>
            <MudTextField @bind-Value="model.Password" For="@(() => model.Password)" Label="Password" Required=true></MudTextField>
            @if(succesful == false)
            {
                <MudAlert Severity="Severity.Error">@reason</MudAlert>
            }
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-3">Register</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" Class="mt-3" OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    RegisterForm model = new RegisterForm();
    bool? succesful = null;
    public string reason;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public async void OnValidSubmit()
    {
        var response = await LoginService.RegisterNewUser(model.RAUsername.ToLower(), model.RAAPIKey, model.Password);

        if(response.Succesful == false)
        {
            succesful = false;
            reason = response.Reason;
            StateHasChanged();
        }
        else
        {
            await LocalStorage.SetItemAsync("loginToken", response.LoginToken);
            Snackbar.Add("Succesfully logged in!", Severity.Success);
            MudDialog.Close(true);
        }
    }

    private void Cancel()
    {
        MudDialog.Close(false);
    }

    public class RegisterForm
    {
        [Required]
        [StringLength(100)]
        public string RAUsername{ get; set; }

        [Required]
        [StringLength(100)]
        public string RAAPIKey{ get; set; }

        [Required]
        [StringLength(100)]
        public string Password{ get; set; }
    }
}
