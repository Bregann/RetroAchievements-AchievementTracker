@using RetroAchievementTracker.Data.GameDataModal
@using DateTimeToStringWithSuffix
@using RetroAchievementTracker.Data.TrackedGames

@inject TrackedGamesService TrackedGamesService;

<MudDialog Style="min-height 300px; max-height: 600px; overflow: auto">
    <TitleContent>
        <MudContainer><MudText Typo="Typo.h3" Align="Align.Center">@GameDataModal.Title</MudText></MudContainer>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing=1>
            <MudItem xs=6  Class="d-flex justify-center">
                <MudImage Src="@GameDataModal.ImageBoxArt" Height=200 Legnth=200/>
            </MudItem>
            <MudItem xs=6  Class="d-flex justify-center">
                <MudImage Src="@GameDataModal.ImageIngame" Height=200 Legnth=200/>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Achievement Count</MudText>

                <MudText Typo="Typo.h6" Align="Align.Center">
                    @if(LoggedIn)
                    {
                        @GameDataModal.AchievementsUnlocked
                    }
                    / @GameDataModal.AchievementCount (@GameDataModal.PercentageCompleted)</MudText>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Genre</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameDataModal.Genre</MudText>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Console</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameDataModal.ConsoleName</MudText>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Players Casual (HC)</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameDataModal.PlayersCasual (@GameDataModal.PlayersHardcore)</MudText>
            </MudItem>
            @foreach(var achievement in Achievements)
            {
                <MudTooltip Arrow="true" Placement="Placement.Top">
                    <ChildContent>
                        <MudItem xs=2 Class="align-content-stretch">
                            <MudImage Src="@achievement.Value.BadgeUrl" Class="ml-1" Height=48 Width=48/>
                        </MudItem>
                    </ChildContent>
                    <TooltipContent>
                        <MudText Style="font-weight: bold">@achievement.Value.Title</MudText>
                        <MudText Style="word-break: break-all;">@achievement.Value.Description</MudText>
                        <MudText>Points: @achievement.Value.Points</MudText>
                        <MudText>Players earned (HC): @achievement.Value.NumAwarded (@achievement.Value.NumAwardedHardcore)</MudText>
                        <MudText>Players earned (HC): @achievement.Value.NumAwarded (@achievement.Value.NumAwardedHardcore)</MudText>
                        @if (LoggedIn)
                        {
                            @if (achievement.Value.DateEarnedHardcore != null)
                            {
                                <MudText>Date Unlocked (HC): @DateTime.Parse(achievement.Value.DateEarnedHardcore.ToString()).ToStringWithSuffix("dd MMMM yyyy - hh:mmtt zzz")</MudText>
                            }
                            @if (achievement.Value.DateEarned != null)
                            {
                                <MudText>Date Unlocked: @DateTime.Parse(achievement.Value.DateEarned.ToString()).ToStringWithSuffix("dd MMMM yyyy - hh:mmtt zzz")</MudText>
                            }
                        }
                    </TooltipContent>
                </MudTooltip>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        @if(LoggedIn)
        {
            <MudSwitch Label="Hide Completed" CheckedChanged="ChangeCompletedGamesToggle" T=bool Checked=hideCompleted Color=Color.Info/>

            @if(GameDataModal.GameTracked)
            {
                <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="mt-3" Style="color: white !important;" OnClick="RemoveTrackedGame">Untrack Game</MudButton>
            }
            else
            {
                <MudButton Color="Color.Success" Variant="Variant.Filled" Class="mt-3" Style="color: white !important;" OnClick="AddTrackedGame">Track Game</MudButton>
            }
        }
        else
        {
        <MudTooltip Text="Login to track games">
            <ChildContent>
                <MudButton Color="Color.Success" Variant="Variant.Filled" Disabled=true Class="mt-3" Style="color: white !important;">Track Game</MudButton>
            </ChildContent>
        </MudTooltip>
        }

        <MudButton Color="Color.Info" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-3" Target="_blank" Link="@GameDataModal.RAURL">Game Page</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" Class="mt-3" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public GameDataModal GameDataModal { get; set; }
    [Parameter] public bool LoggedIn { get; set; }
    private bool hideCompleted;
    private Dictionary<string, Achievement> Achievements;

    protected override void OnParametersSet()
    {
        Achievements = GameDataModal.Achievements;
    }

    private void Cancel()
    {
        MudDialog.Close(false);
    }

    private void ChangeCompletedGamesToggle(bool toggleState)
    {
        if(toggleState)
        {
            Achievements = GameDataModal.Achievements.Where(x => x.Value.DateEarned == null).ToDictionary(x => x.Key, x => x.Value);
            hideCompleted = true;
            StateHasChanged();
        }
        else
        {
            Achievements = GameDataModal.Achievements;
            hideCompleted = false;
            StateHasChanged();
        }
    }

    public void AddTrackedGame()
    {
        TrackedGamesService.AddTrackedGame(GameDataModal.Id, GameDataModal.LoggedInUser);
        GameDataModal.GameTracked = true;
        StateHasChanged();
    }

    public void RemoveTrackedGame()
    {
        TrackedGamesService.DeleteTrackedGame(GameDataModal.Id, GameDataModal.LoggedInUser);
        GameDataModal.GameTracked = false;
        StateHasChanged();
    }

}
