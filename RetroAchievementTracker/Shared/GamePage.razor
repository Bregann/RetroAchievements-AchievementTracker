@page "/game/{GameID:int}/{Username?}"
@using DateTimeToStringWithSuffix
@using RetroAchievementTracker.Data.GameData
@using RetroAchievementTracker.Data.Login
@using RetroAchievementTracker.Data.TrackedGames

@inject GameDataService GameDataModalService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject LoginService LoginService;
@inject TrackedGamesService TrackedGamesService;

@if(GameData == null)
{
    <MudText Typo="Typo.h1" Color="Color.Warning" Align="Align.Center">No game data found!</MudText>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="overflow-y: hidden;">
        <MudText Typo="Typo.h1" Align=Align.Center>@GameData.Title</MudText>
        <MudGrid Spacing=1>
            <MudItem xs=6  Class="d-flex justify-center">
                <MudImage Src="@GameData.ImageBoxArt" Height=200 Legnth=200/>
            </MudItem>
            <MudItem xs=6  Class="d-flex justify-center">
                <MudImage Src="@GameData.ImageIngame" Height=200 Legnth=200/>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Achievement Count</MudText>
                @if(Username != null)
                {
                    <MudText Typo="Typo.h6" Align="Align.Center">@GameData.AchievementsUnlocked / @GameData.AchievementCount (@GameData.PercentageCompleted)</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6" Align="Align.Center">0 / @GameData.AchievementCount</MudText>
                }
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Genre</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameData.Genre</MudText>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Console</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameData.ConsoleName</MudText>
            </MudItem>
            <MudItem xs=3>
                <MudText Typo="Typo.h5" Align="Align.Center" Style="font-weight: bold">Players Casual (HC)</MudText>
                <MudText Typo="Typo.h6" Align="Align.Center">@GameData.PlayersCasual (@GameData.PlayersHardcore)</MudText>
            </MudItem>
            @foreach(var achievement in Achievements)
            {
                var colourToSet = "#E5393550";

                @if (achievement.Value.Title.Contains("[m]"))
                {
                    colourToSet = "#FFA72650";
                }

                @if (achievement.Value.DateEarned != null)
                {
                    colourToSet = "#43A04750";
                }

                <MudItem xs=4 Style="align-content-center" Class="pb-4">
                    <MudPaper Outlined=true MinHeight="80px" MaxHeight="120px" Style="@($"background-color:{colourToSet};")">
                        <MudTooltip Arrow="true" Placement="Placement.Top">
                            <ChildContent>
                             <MudStack Row="true" Style="pt-4">
                                <MudImage Src="@achievement.Value.BadgeUrl" Class="ml-1 mt-4" Height=48 Width=48/>
                                <MudStack Spacing="0">
                                    <MudText Style="font-weight: bold" Class="pt-4">@achievement.Value.Title</MudText>
                                    <MudText Style="word-break: break-all;">@achievement.Value.Description</MudText>
                                </MudStack>
                            </MudStack>
                            </ChildContent>
                            <TooltipContent>
                                <MudText>Players earned (HC): @achievement.Value.NumAwarded (@achievement.Value.NumAwardedHardcore)</MudText>
                                <MudText>Players earned (HC): @achievement.Value.NumAwarded (@achievement.Value.NumAwardedHardcore)</MudText>
                                @if (Username != null)
                                {
                                    @if (achievement.Value.DateEarnedHardcore != null)
                                    {
                                        <MudText>Date Unlocked (HC): @DateTime.Parse(achievement.Value.DateEarnedHardcore.ToString()).ToStringWithSuffix("dd MMMM yyyy - hh:mmtt zzz")</MudText>
                                    }
                                    @if (achievement.Value.DateEarned != null)
                                    {
                                        <MudText>Date Unlocked: @DateTime.Parse(achievement.Value.DateEarned.ToString()).ToStringWithSuffix("dd MMMM yyyy - hh:mmtt zzz")</MudText>
                                    }
                                }

                                <MudText>Points: @achievement.Value.Points</MudText>
                            </TooltipContent>
                        </MudTooltip>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
        <MudPaper Style="position: fixed; left: 0; bottom: 0;  background-color: #424242" Outlined=true Height="65px" Width="100%">
            <MudGrid>
                <MudItem xs=3></MudItem>
                <MudItem xs=3 Class="mt-4">
                    <MudStack Row="true">
                        <MudText>Key</MudText>
                        <MudPaper Height="30px" Width="100px" Style="background-color: #43A04750; text-align: center;" Class="pt-1">Unlocked</MudPaper>
                        <MudPaper Height="30px" Width="100px" Style="background-color: #E5393550; text-align: center;" Class="pt-1">Locked</MudPaper>
                        <MudPaper Height="30px" Width="100px" Style="background-color: #FFA72650; text-align: center;" Class="pt-1">Missable</MudPaper>
                    </MudStack>
                </MudItem>
                <MudItem xs=5>
                    @if(Username != null)
                    {
                        <MudSwitch Label="Hide Completed" CheckedChanged="ChangeCompletedGamesToggle" T=bool Checked=hideCompleted Color=Color.Info Style="z-index: 9999" Class="mt-2"/>
                        <MudButton Color="Color.Info" Variant="Variant.Filled" Class="mt-3" Style="color: white !important; z-index: 9999" OnClick="UpdateAchievements">Update Achievements</MudButton>
                    }

                    @if(SameUserLoggedIn)
                    {
                        @if(GameData.GameTracked)
                        {
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="mt-3" Style="color: white !important;" OnClick="RemoveTrackedGame">Untrack Game</MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Success" Variant="Variant.Filled" Class="mt-3" Style="color: white !important;" OnClick="AddTrackedGame">Track Game</MudButton>
                        }
                    }
                    else
                    {
                    <MudTooltip Text="Login to track games">
                        <ChildContent>
                            <MudButton Color="Color.Success" Variant="Variant.Filled" Disabled=true Class="mt-3" Style="color: white !important;">Track Game</MudButton>
                        </ChildContent>
                    </MudTooltip>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudPaper Style="opacity: 0; margin-bottom: 100px"/>
    </MudContainer>
}


@code {
    [Parameter] public int GameID{ get; set; }
    [Parameter] public string? Username { get; set; }
    public GameData GameData { get; set; }
    private Dictionary<string, Achievement> Achievements;
    private bool hideCompleted;
    private bool SameUserLoggedIn = false;

    protected override async Task OnParametersSetAsync()
    {
        if(Username == null)
        {
            GameData = await GameDataModalService.GetGameDataToPopulateModal(GameID);
        }
        else
        {
            GameData = await GameDataModalService.GetLoggedInDataToPopulateModal(GameID, Username);
        }


        if(GameData != null)
        {
            Achievements = GameData.Achievements;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //Make sure it's a valid login and get the logged in user
            var token = await LocalStorage.GetItemAsync<string>("loginToken");

            if(LoginService.ValidateUserLogin(token))
            {
                var loggedInUser = LoginService.GetLoggedInUser(token);

                if(loggedInUser == null)
                {
                    return;
                }

                if(Username == null)
                {
                    return;
                }

                if(Username.ToLower() == loggedInUser)
                {
                    SameUserLoggedIn = true;
                }
            }

            StateHasChanged();
        }
    }

    private void ChangeCompletedGamesToggle(bool toggleState)
    {
        if(toggleState)
        {
            Achievements = GameData.Achievements.Where(x => x.Value.DateEarned == null).ToDictionary(x => x.Key, x => x.Value);
            hideCompleted = true;
            StateHasChanged();
        }
        else
        {
            Achievements = GameData.Achievements;
            hideCompleted = false;
            StateHasChanged();
        }
    }

    public async void UpdateAchievements()
    {
        GameData = await GameDataModalService.GetLoggedInDataToPopulateModal(GameData.Id, Username);

        if(hideCompleted)
        {
            Achievements = GameData.Achievements.Where(x => x.Value.DateEarned == null).ToDictionary(x => x.Key, x => x.Value);
            StateHasChanged();
        }
        else
        {
            Achievements = GameData.Achievements;
            StateHasChanged();
        }
    }

    public void AddTrackedGame()
    {
        TrackedGamesService.AddTrackedGame(GameData.Id, GameData.LoggedInUser);
        GameData.GameTracked = true;
        StateHasChanged();
    }

    public void RemoveTrackedGame()
    {
        TrackedGamesService.DeleteTrackedGame(GameData.Id, GameData.LoggedInUser);
        GameData.GameTracked = false;
        StateHasChanged();
    }
}

